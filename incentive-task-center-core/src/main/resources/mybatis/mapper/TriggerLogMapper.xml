<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="fun.pullock.incentive.core.dao.mapper.TriggerLogMapper">
  <resultMap id="BaseResultMap" type="fun.pullock.incentive.core.dao.model.TriggerLogDO">
    <id column="id" jdbcType="BIGINT" property="id" />
    <result column="create_time" jdbcType="TIMESTAMP" property="createTime" />
    <result column="update_time" jdbcType="TIMESTAMP" property="updateTime" />
    <result column="user_id" jdbcType="BIGINT" property="userId" />
    <result column="event_code" jdbcType="VARCHAR" property="eventCode" />
    <result column="event_rule_data" jdbcType="LONGVARCHAR" property="eventRuleData" />
    <result column="event_time" jdbcType="TIMESTAMP" property="eventTime" />
    <result column="status" jdbcType="SMALLINT" property="status" />
    <result column="source" jdbcType="VARCHAR" property="source" />
    <result column="unique_source_id" jdbcType="VARCHAR" property="uniqueSourceId" />
    <result column="process_result" jdbcType="LONGVARCHAR" property="processResult" />
  </resultMap>

  <sql id="Base_Column_List">
    id, create_time, update_time,
    user_id, event_code, event_rule_data,
    event_time, status, source,
    unique_source_id, process_result
  </sql>

  <select id="selectByPrimaryKey" parameterType="java.lang.Long" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from trigger_log
    where id = #{id,jdbcType=BIGINT}
  </select>

  <delete id="deleteByPrimaryKey" parameterType="java.lang.Long">
    delete from trigger_log
    where id = #{id,jdbcType=BIGINT}
  </delete>

  <insert id="insert" keyColumn="id" keyProperty="id" useGeneratedKeys="true" parameterType="fun.pullock.incentive.core.dao.model.TriggerLogDO">
    insert into trigger_log (
      id, create_time, update_time,
      user_id, event_code, event_rule_data,
      event_time, status, source,
      unique_source_id, process_result
    ) values (
      #{id,jdbcType=BIGINT}, #{createTime,jdbcType=TIMESTAMP}, #{updateTime,jdbcType=TIMESTAMP},
      #{userId,jdbcType=BIGINT}, #{eventCode,jdbcType=VARCHAR}, #{eventRuleData,jdbcType=LONGVARCHAR},
      #{eventTime,jdbcType=TIMESTAMP}, #{status,jdbcType=SMALLINT}, #{source,jdbcType=VARCHAR},
      #{uniqueSourceId,jdbcType=VARCHAR}, #{processResult,jdbcType=LONGVARCHAR}
    )
  </insert>

  <insert id="insertSelective" keyColumn="id" keyProperty="id" useGeneratedKeys="true" parameterType="fun.pullock.incentive.core.dao.model.TriggerLogDO">
    insert into trigger_log
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null">
        id,
      </if>
      <if test="createTime != null">
        create_time,
      </if>
      <if test="updateTime != null">
        update_time,
      </if>
      <if test="userId != null">
        user_id,
      </if>
      <if test="eventCode != null">
        event_code,
      </if>
      <if test="eventRuleData != null">
        event_rule_data,
      </if>
      <if test="eventTime != null">
        event_time,
      </if>
      <if test="status != null">
        status,
      </if>
      <if test="source != null">
        source,
      </if>
      <if test="uniqueSourceId != null">
        unique_source_id,
      </if>
      <if test="processResult != null">
        process_result,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="id != null">
        #{id,jdbcType=BIGINT},
      </if>
      <if test="createTime != null">
        #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="updateTime != null">
        #{updateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="userId != null">
        #{userId,jdbcType=BIGINT},
      </if>
      <if test="eventCode != null">
        #{eventCode,jdbcType=VARCHAR},
      </if>
      <if test="eventRuleData != null">
        #{eventRuleData,jdbcType=LONGVARCHAR},
      </if>
      <if test="eventTime != null">
        #{eventTime,jdbcType=TIMESTAMP},
      </if>
      <if test="status != null">
        #{status,jdbcType=SMALLINT},
      </if>
      <if test="source != null">
        #{source,jdbcType=VARCHAR},
      </if>
      <if test="uniqueSourceId != null">
        #{uniqueSourceId,jdbcType=VARCHAR},
      </if>
      <if test="processResult != null">
        #{processResult,jdbcType=LONGVARCHAR},
      </if>
    </trim>
  </insert>

  <update id="updateByPrimaryKeySelective" parameterType="fun.pullock.incentive.core.dao.model.TriggerLogDO">
    update trigger_log
    <set>
      <if test="createTime != null">
        create_time = #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="updateTime != null">
        update_time = #{updateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="userId != null">
        user_id = #{userId,jdbcType=BIGINT},
      </if>
      <if test="eventCode != null">
        event_code = #{eventCode,jdbcType=VARCHAR},
      </if>
      <if test="eventRuleData != null">
        event_rule_data = #{eventRuleData,jdbcType=LONGVARCHAR},
      </if>
      <if test="eventTime != null">
        event_time = #{eventTime,jdbcType=TIMESTAMP},
      </if>
      <if test="status != null">
        status = #{status,jdbcType=SMALLINT},
      </if>
      <if test="source != null">
        source = #{source,jdbcType=VARCHAR},
      </if>
      <if test="uniqueSourceId != null">
        unique_source_id = #{uniqueSourceId,jdbcType=VARCHAR},
      </if>
      <if test="processResult != null">
        process_result = #{processResult,jdbcType=LONGVARCHAR},
      </if>
    </set>
    where id = #{id,jdbcType=BIGINT}
  </update>

  <update id="updateByPrimaryKey" parameterType="fun.pullock.incentive.core.dao.model.TriggerLogDO">
    update trigger_log
    set create_time = #{createTime,jdbcType=TIMESTAMP},
      update_time = #{updateTime,jdbcType=TIMESTAMP},
      user_id = #{userId,jdbcType=BIGINT},
      event_code = #{eventCode,jdbcType=VARCHAR},
      event_rule_data = #{eventRuleData,jdbcType=LONGVARCHAR},
      event_time = #{eventTime,jdbcType=TIMESTAMP},
      status = #{status,jdbcType=SMALLINT},
      source = #{source,jdbcType=VARCHAR},
      unique_source_id = #{uniqueSourceId,jdbcType=VARCHAR},
      process_result = #{processResult,jdbcType=LONGVARCHAR}
    where id = #{id,jdbcType=BIGINT}
  </update>

  <select id="selectByUniqueKey" resultMap="BaseResultMap">
    select
    <include refid="Base_Column_List" />
    from trigger_log
    where user_id = #{userId,jdbcType=BIGINT}
      and source = #{source,jdbcType=VARCHAR}
      and unique_source_id = #{uniqueSourceId,jdbcType=VARCHAR}
  </select>

  <update id="updateStatus">
    update trigger_log
    set update_time = now(),
        status = #{newStatus,jdbcType=SMALLINT}
    where id = #{id,jdbcType=BIGINT}
      and status = #{oldStatus,jdbcType=SMALLINT}
  </update>

  <update id="failed">
    update trigger_log
    set update_time = now(),
        status = 2,
        process_result = #{processResult,jdbcType=LONGVARCHAR}
    where id = #{id,jdbcType=BIGINT}
      and status = 1
  </update>

  <update id="updateResult">
    update trigger_log
    set update_time = now(),
        status = #{newStatus,jdbcType=SMALLINT},
        process_result = #{processResult,jdbcType=LONGVARCHAR}
    where id = #{id,jdbcType=BIGINT}
      and status = #{oldStatus,jdbcType=SMALLINT}
  </update>

  <select id="selectFailedLogs" resultMap="BaseResultMap">
    select
    <include refid="Base_Column_List" />
    from trigger_log
    where status = 2
    order by id asc
  </select>
</mapper>